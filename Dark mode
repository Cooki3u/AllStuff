import React, { createContext, useState, useContext, useMemo, useEffect } from "react";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import { CssBaseline, IconButton } from "@mui/material";
import { Brightness4, Brightness7, Logout } from "@mui/icons-material";
import { BrowserRouter as Router, Routes, Route, useNavigate } from "react-router-dom";
import { MapContainer, TileLayer } from "react-leaflet";
import "leaflet/dist/leaflet.css";

// **🌙 Theme Context for Global Dark Mode**
interface ThemeContextType {
  darkMode: boolean;
  toggleDarkMode: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

const ThemeProviderWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [darkMode, setDarkMode] = useState<boolean>(localStorage.getItem("darkMode") === "true");

  const toggleDarkMode = () => {
    setDarkMode((prev) => {
      const newMode = !prev;
      localStorage.setItem("darkMode", JSON.stringify(newMode));
      return newMode;
    });
  };

  const theme = useMemo(() => createTheme({ palette: { mode: darkMode ? "dark" : "light" } }), [darkMode]);

  return (
    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        {children}
      </ThemeProvider>
    </ThemeContext.Provider>
  );
};

const useThemeContext = () => {
  const context = useContext(ThemeContext);
  if (!context) throw new Error("useThemeContext must be used within ThemeProviderWrapper");
  return context;
};

// **🌙 Dark Mode Toggle Button**
const DarkModeButton: React.FC = () => {
  const { darkMode, toggleDarkMode } = useThemeContext();
  return (
    <IconButton color="inherit" onClick={toggleDarkMode}>
      {darkMode ? <Brightness7 /> : <Brightness4 />}
    </IconButton>
  );
};

// **🔓 Logout Button**
const LogoutButton: React.FC = () => {
  const navigate = useNavigate();
  const handleLogout = () => {
    localStorage.removeItem("token");
    navigate("/login");
  };
  return (
    <IconButton color="inherit" onClick={handleLogout}>
      <Logout />
    </IconButton>
  );
};

// **🗺️ Leaflet Map Component (Dynamically switches between light & dark tiles)**
const MapComponent: React.FC = () => {
  const { darkMode } = useThemeContext();
  const [tileLayer, setTileLayer] = useState("");

  useEffect(() => {
    setTileLayer(
      darkMode
        ? "https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png"
        : "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
    );
  }, [darkMode]);

  return (
    <MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: "500px", width: "100%" }}>
      <TileLayer url={tileLayer} />
    </MapContainer>
  );
};

// **🔝 Navbar Component**
const Navbar: React.FC = () => (
  <nav style={{ display: "flex", gap: "10px", padding: "10px" }}>
    <DarkModeButton />
    <LogoutButton />
  </nav>
);

// **🚀 Main App Component**
const App: React.FC = () => {
  return (
    <ThemeProviderWrapper>
      <Router>
        <Navbar />
        <Routes>
          <Route path="/" element={<MapComponent />} />
          <Route path="/login" element={<h2>Login Page</h2>} />
        </Routes>
      </Router>
    </ThemeProviderWrapper>
  );
};

export default App;
